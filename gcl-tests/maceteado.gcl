-- Linear search  
module searchmod  
private 
        const size = 10;  
        typedef integer range [1..size] sizer;
        typedef integer array [sizer] elements;
        sizer j;
        elements A;
        integer x;
        [Boolean, integer] result;
        integer j;                       -- redeclaracao de j

        proc search (val integer target; val elements B; 
				ref [Boolean, integer] res)
        integer m, i, where; 
        Boolean found;
        begin 
                i:= true;                -- type mismatch
                size:= m;                -- assignment to a constant
                found := 5;              -- type mismatch
                do A ->                  -- type mismatch 
                        if B[i] = res -> -- type mismatch 
                                        found := true; 
                                        where := i;
                                        i := m + A;   -- type mismatch (+)
                        []  B[i] + target ->  -- must be boolean 
                                        res.1 := i+1; -- type mismatch
                        fi; 
                od; 
                res.2 := [found, where];       -- type mismatch
                res := [where, found];         -- type mismatch
                res := [found, where, where];  -- mismatch in number of elmts
        end;  
        
begin 
  -- test search  
        forall j -> read A[j].2; llarof; -- Not a tuple
        read A;                          -- Not an integer
        do x#0 -> search(x,A);           -- mismatch in number of parms
                if result.5 -> write x, ' can be found at ', result.2;  
                                         -- tuple has no 5th element
                [] ~result.1[4] -> write x, ' not found'; 
                                         -- not a vector
                fi; 
                read x; 
        od;
 end.  
