# Rachel Programming Language
# RApid and CHEater Language
# Data Types -> string, int, char and array (perhaps tuple?)

(nothing int go, string dad -> int)

(firstChars string a -> string:
  int size((count a));
  string final((count a));
  int counter(0);
  
  body:

  while (&& (< counter size) (> counter 500)) {
    final[counter] = a[counter][0];
  };

  |final;
)

(nothing int go, string dad -> int:

  string caca(4); # cria e inicializa uma variavel

  body:

  if (== dad "mom") {
    |23; # retorno
  } else {
    |(+ go 30 45);
  };
)

(reverse string name -> string:

  # para inicializar uma string, passa-se uma outra string ou um tamanho 
  string r((count name));
  int size((count name));
  char firstChar(name[0]);
  char anyChar('a');
  int i(0);
  
  body:

  while (< i size) {
    r[i] = nome[(- size i)];
    i = (+ i 1);
  };
  
  |r;
)

(myFunction: # tipo de retorno void e nao recebe parametros
  body:
  (writeln "Good News Everyone!");
)

(main -> int:

  string nome("Leandro Santiago da Silva"); 
  int idade(23);

  body:

  (writeln "Hello World");
    
  (myFunction);

  | (+ (nothing (+ nome[2] 2) "joseph") (nothing (* 4 3) "mom"));
)

# Program -> Function FunctionList
# FunctionList -> Function FunctionList
# FunctionList -> {}
# Function -> FunctionImpl
# Function -> FunctionDecl

# Funcao com implementacao
# FunctionImpl -> "(" identifier ListOfFormalParams ":" FunctionContent ")" 
# FunctionImpl -> "(" identifier ListOfFormalParams "->" TypeName ":" FunctionContent ")"

# Funcao sem implementacao, so interface
# FunctionImpl -> "(" identifier ListOfFormalParams ")" 
# FunctionImpl -> "(" identifier ListOfFormalParams "->" TypeName ")"

# TypeName -> BasicTypeName
# TypeName -> ArrayTypeName

# BasicTypeName -> "int"
# BasicTypeName -> "string"

# ArrayTypeName -> "[" ArrayTypeSize "]" ArrayTypeNameExt BasicTypeName
# ArrayTypeNameExt -> "[" ArrayTypeSize "]" ArrayTypeNameExt
# ArrayTypeNameExt -> {}

# ArrayTypeSize -> TkInt
# ArrayTypeSize -> {}

# ListOfFormalParams -> ListOfParamDef
# ListOfParamDef -> {}
# ListOfParamDef -> ParamDef ListOfParamDefExt
# ListOfParamDefExt -> "," ParamDef ListOfParamDefExt
# ListOfParamDefExt -> {}

# ParamDef -> TypeName TkId

# FunctionContent -> VariableDeclarationList "body" ":" FunctionBody

# VariableDeclarationList -> {}
# VariableDeclarationList -> VariableInitialization ";" VariableInitializationListExt
# VariableInitializationListExt ->  VariableInitialization ";" VariableInitializationListExt
# VariableInitializationListExt -> {}  

# VariableInitialization -> TypeName TkId "(" Expression ")"

# FunctionBody -> StmList
# StmList -> Stm ";" StmList
# StmList -> {}

# Stm -> FunctionCall
# Stm -> AttrStm
# Stm -> IfStm
# Stm -> WhileStm
# Stm -> ReturnStm

# FunctionCall -> "(" FunctionName RealParameters ")"
# RealParameters -> Expression RealParameters
# RealParameters -> {}

# FunctionName -> TkId
# FunctionName -> "+"
# FunctionName -> "-"
# FunctionName -> "*"
# FunctionName -> "/"
# FunctionName -> "%"
# FunctionName -> "&&"
# FunctionName -> "||"
# FunctionName -> "~"
# FunctionName -> "=="
# FunctionName -> "!="
# FunctionName -> ">"
# FunctionName -> ">="
# FunctionName -> "<"
# FunctionName -> "<="

# AttrStm -> VariableAccess "=" Expression
# VariableAccess -> TkId
# VariableAccess -> TkId IndexAccess
# IndexAccess -> "[" Expression "]" IndexAccessExt
# IndexAccessExt -> IndexAccess
# IndexAccessExt -> {}

# IfStm -> "if" Expression "{" StmList "}"
# IfStm -> "if" Expression "{" StmList "}" "else" "{" StmList "}"

# WhileStm -> "while" Expression "{" StmList "}"

# ReturnStm -> "|" Expression

# Expression -> FunctionCall
# Expression -> TkInteger
# Expression -> TkString
# Expression -> TkChar
# Expression -> VariableAccess
